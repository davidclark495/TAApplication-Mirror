/*    Author: Robert Davidson    Partner: David Clark    Date: 11/27/2022    Course: CS 4540, University of Utah, School of Computing    Copyright: CS 4540, David Clark and Robert Davidson - This work may not be copied for use in Academic Coursework.	    I, David Clark, certify that I wrote this code from scratch and did not copy it in part or whole from     another source.  Any references used in the completion of the assignment are cited in my README file.    I, Robert Davidson, certify that I wrote this code from scratch and did not copy it in part or whole from    another source. Any references used in the completion of the assignment are cited in my README file.    File Contents        Draws availability schedule for user. Allows editing and saving availability. */class Slot extends PIXI.Graphics {    constructor(slotNum, available, x, y, width, height)     {        super();        this.slotNum = slotNum;        this.available = available;        this.x = x;        this.y = y;        this.width = width;        this.height = height;        this.interactive = true;        this.on('mousedown', this.pointer_down);    }    draw_slot()     {        this.clear();        // color = this.available ? available_color * 0xffffff : 0x000000;        color = 0x00ff44;        if (this.slotNum % 2 == 1) {            this.beginFill(color);            console.log("Color Filled @ " + this.slotNum);        }        else {            this.beginFill(0xffffff);            console.log("Color Filled also @ " + this.slotNum);        }        this.drawRect(0, 0, 100, 100);        console.log("------- " + this.slotNum + " -------");        console.log("x: " + this.x);        console.log("y: " + this.y);        console.log("w: " + this.width);        console.log("h: " + this.height);    }    pointer_down()    {        this.available = !this.available;        this.draw_slot();        mouse_down = true;        console.log("got here");    }}let bg_color = 0x000055;let rect_color = 0xeeee55;let border_color = 0xaaaaa1;const available_color = 0x343464;const unavailable_color = 0x2f2f2f;let width = 800;let height = 600;var color = 0xffffff;var mouse_down = false;app = new PIXI.Application({ backgroundColor: bg_color });app.renderer.resize(width, height);$("#canvas_div").append(app.view);// var square_1 = build_square(1);// var square_2 = build_square(2);var slots = build_slots();var grid = build_grid();//let slots = [];function build_grid() {    const numDaysWithBuffer = 6;    const numSlotsWithBuffer = 56;    const slotWidth = width / numDaysWithBuffer;    const slotHeight = height / numSlotsWithBuffer;    var grid = new PIXI.Graphics();    grid.x = 20;    grid.y = 4 * slotHeight;    grid.beginFill(border_color);    // Horizontal Lines    for (var i = 0; i < numSlotsWithBuffer - 6; i += 4) {        grid.drawRect(0, i * slotHeight, width - slotWidth, 1);    }    // Vertical Lines    for (var i = 0; i < numDaysWithBuffer; i++) {        grid.drawRect(i * slotWidth, 0, 1, height - slotHeight * 8);    }    app.stage.addChild(grid);    return grid;}function build_slots() {    const numDaysWithBuffer = 6;    const numSlotsWithBuffer = 56;    const slotWidth = width / numDaysWithBuffer;    const slotHeight = height / numSlotsWithBuffer;    // var slotGrid = new PIXI.Graphics();    // slotGrid.x = 20;    // slotGrid.y = 4 * slotHeight;    // slotGrid.beginFill(available_color);    // let slot_data = load_slots(); // data received from the server, JSON    let slot_arr = []; // js representation of Slot objects    // Slot Initialization    for (let i = 0; i < 5 * 48; i++) {        var x = Math.floor(i / 48) * slotWidth;        var y = i % 48 * slotHeight;        //        var isAvailable = slot_data[i]["isOpen"];        var new_slot = new Slot(i, true, x, y, slotWidth, slotHeight);        new_slot.draw_slot();        app.stage.addChild(new_slot);        console.log("line 119 reached:" + i);        slot_arr.push(new_slot);    }    //app.stage.addChild(slotGrid);    //slotGrid.on('mousedown', pointer_down);    //slotGrid.on('mouseover', pointer_over);    //slotGrid.on('mouseup', pointer_up);    return slot_arr;}// function build_square(id) {//     var square = new PIXI.Graphics();//     square.beginFill(rect_color);//     square.drawRect(0, 0, 100, 100);//     square.x = 50 + 150 * id;//     square.y = 50;//     square.interactive = true;//     square.id = id;//     app.stage.addChild(square);//     square.on('mousedown', pointer_down);//     square.on('mouseover', pointer_over);//     square.on('mouseup', pointer_up);//     return square;// }// function old_pointer_down() {//     this.clear();//     color = Math.random() * 0xffffff;//     this.beginFill(color);//     this.drawRect(0, 0, 100, 100);//     this.x += 1;//     this.y += 1;//     mouse_down = true;// }// function old_pointer_up() {//     console.log("pointer up");//     mouse_down = false;// }// function old_pointer_over() {//     console.log(`I am square ${this.id}`);//     if (this.id == 2 && mouse_down) {//         this.clear();//         this.beginFill(color);//         this.drawRect(0, 0, 100, 100);//     }// }// some thoughts:// 1) sometimes "this" is not what you think it is, if so use bind// 2) start simple and test, use abstractionfunction load_slots() {    existing_slots = [];    $.ajax({        url: "Availability/GetSchedule/",        type: "GET"    })        .done(function (data) {            existing_slots = data;        })        .fail(function (data) { console.log("Catastrophe! Slots were not recieved from Database."); });    return existing_slots;}